image: golang:latest

variables:
  REPO_NAME: gitlab.com/oleg.balunenko/logs-converter
  BIN_NAME: logs-converter
  ARTIFACTS_DIR: artifacts
  GOARCH: amd64

 


# The problem is that to be able to use go get, one needs to put
# the repository in the $GOPATH. So for example if your gitlab domain
# is gitlab.com, and that your repository is namespace/project, and
# the default GOPATH being /go, then you'd need to have your
# repository in /go/src/gitlab.com/namespace/project
# Thus, making a symbolic link corrects this.
before_script:
  - go version
  - mkdir -p ${GOPATH}/src/${REPO_NAME}
  - mkdir -p ${CI_PROJECT_DIR}/${ARTIFACTS_DIR}
  - go get -u github.com/golang/dep/cmd/dep/...
  - go get -u github.com/axw/gocov/...
  - cp -r ${CI_PROJECT_DIR}/* ${GOPATH}/src/${REPO_NAME}/
  - cd ${GOPATH}/src/${REPO_NAME}
   

stages:
    - test
    - build

test-project:
    stage: test
    script:
      - go fmt $(go list ./... | grep -v /vendor/)
      - go vet -composites=false $(go list ./... | grep -v /vendor/)
      - go test -race $(go list ./... | grep -v /vendor/) -v -coverprofile .testCoverage.out
      - gocov convert .testCoverage.out | gocov report


compile:
    stage: build
    script:

     - export GOOS=darwin
     - go build -o ${CI_PROJECT_DIR}/${ARTIFACTS_DIR}/${BIN_NAME}-${GOOS}
    

     - export GOOS=linux
     - go build -o ${CI_PROJECT_DIR}/${ARTIFACTS_DIR}/${BIN_NAME}-${GOOS}

     - export GOOS=windows
     - go build -o ${CI_PROJECT_DIR}/${ARTIFACTS_DIR}/${BIN_NAME}-${GOOS}.exe
    artifacts:
      paths:
        - ${ARTIFACTS_DIR}