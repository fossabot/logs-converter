image: golang:latest

variables:
  REPO_NAME: gitlab.com/oleg.balunenko/logs-converter
 


# The problem is that to be able to use go get, one needs to put
# the repository in the $GOPATH. So for example if your gitlab domain
# is gitlab.com, and that your repository is namespace/project, and
# the default GOPATH being /go, then you'd need to have your
# repository in /go/src/gitlab.com/namespace/project
# Thus, making a symbolic link corrects this.
before_script:
  - go version
  - echo $CI_BUILD_REF
  - echo $CI_PROJECT_DIR
  - export PACKAGE_NAME="$(basename "$REPO_NAME")"
  - export GOARCH=amd64
  - mkdir -p $GOPATH/src/$REPO_NAME
  - ln -svf $CI_PROJECT_DIR/* $GOPATH/src/$REPO_NAME
  - cd $GOPATH/src/$REPO_NAME
  - go get -t ./...
   

stages:
    - test
    - build

test-project:
    stage: test
    script:
      - go fmt $(go list ./... | grep -v /vendor/)
      - go vet -composites=false $(go list ./... | grep -v /vendor/)
      - go test -race $(go list ./... | grep -v /vendor/) -v -coverprofile .testCoverage.txt


compile:
    stage: build
    script:
     - mkdir -p $CI_PROJECT_DIR/artifacts

     - export GOOS=darwin
     - go build -o $CI_PROJECT_DIR/artifacts/$PACKAGE_NAME-$GOOS
    

     - export GOOS=linux
     - go build -o $CI_PROJECT_DIR/artifacts/$PACKAGE_NAME-$GOOS

     - export GOOS=windows
     - go build -o $CI_PROJECT_DIR/artifacts/$PACKAGE_NAME-$GOOS
    artifacts:
      paths:
        - artifacts